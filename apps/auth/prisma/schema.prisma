datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  emailVerified       Boolean              @default(false)
  phone               String?              @unique
  password            String?
  accounts            Account[]
  roleAssignments     RoleAssignment[]
  refreshTokens       RefreshToken[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@map("users")
}

model Account {
  id                String       @id @default(cuid())
  userId            String
  provider          ProviderType
  providerAccountId String       @unique
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Role {
  id          String           @id @default(cuid())
  name        RoleType         @unique
  assignments RoleAssignment[]

  @@map("roles")
}

model RoleAssignment {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("role_assignments")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum ProviderType {
  GOOGLE
  FACEBOOK
  LOCAL
}

enum RoleType {
  CUSTOMER
  SERVICE_PROVIDER
  WORKER
  BUSINESS_OWNER
  ADMIN
}
